{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class CrearClienteComponent {\n  constructor(fb) {\n    this.fb = fb;\n    this.clienteForm = this.fb.group({\n      nombre: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      telefono: ['', Validators.required],\n      otrosDatos: ['', Validators.required],\n      direcciones: this.fb.array([]) // FormArray para múltiples direcciones\n    });\n  }\n\n  ngOnInit() {\n    // Iniciar con una dirección vacía\n    this.addDireccion();\n  }\n  // Getter para acceder al FormArray de direcciones\n  get direcciones() {\n    return this.clienteForm.get('direcciones');\n  }\n  // Método para agregar una nueva dirección\n  addDireccion() {\n    const direccionForm = this.fb.group({\n      calle: ['', Validators.required],\n      sector: ['', Validators.required],\n      provincia: ['', Validators.required],\n      pais: ['', Validators.required]\n    });\n    this.direcciones.push(direccionForm);\n  }\n  // Método para eliminar una dirección\n  removeDireccion(index) {\n    this.direcciones.removeAt(index);\n  }\n  // Método para guardar el cliente con direcciones\n  saveCliente() {\n    if (this.clienteForm.valid) {\n      console.log(this.clienteForm.value);\n      // Lógica para guardar el cliente y sus direcciones\n    }\n  }\n\n  static {\n    this.ɵfac = function CrearClienteComponent_Factory(t) {\n      return new (t || CrearClienteComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CrearClienteComponent,\n      selectors: [[\"app-crear-cliente\"]],\n      decls: 19,\n      vars: 0,\n      consts: [[1, \"mb-3\"], [\"for\", \"InputNombre\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"InputNombre\", 1, \"form-control\"], [\"for\", \"InputEmail\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"InputEmail\", 1, \"form-control\"], [\"for\", \"InputTel\", 1, \"form-label\"], [\"type\", \"tel\", \"id\", \"InputTel\", 1, \"form-control\"], [\"for\", \"InputOtros\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"InputOtros\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n      template: function CrearClienteComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\")(1, \"div\", 0)(2, \"label\", 1);\n          i0.ɵɵtext(3, \"Nombre\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"input\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 0)(6, \"label\", 3);\n          i0.ɵɵtext(7, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 0)(10, \"label\", 5);\n          i0.ɵɵtext(11, \"Telefono\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 0)(14, \"label\", 7);\n          i0.ɵɵtext(15, \"Otros Datos\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"button\", 9);\n          i0.ɵɵtext(18, \"Submit\");\n          i0.ɵɵelementEnd()();\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","CrearClienteComponent","constructor","fb","clienteForm","group","nombre","required","email","telefono","otrosDatos","direcciones","array","ngOnInit","addDireccion","get","direccionForm","calle","sector","provincia","pais","push","removeDireccion","index","removeAt","saveCliente","valid","console","log","value","i0","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","CrearClienteComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement"],"sources":["/Users/ericramirez/Desktop/Dev_Learning/FrontEnd/Angular/control_clientes_frontend/src/app/Components/crear-cliente/crear-cliente.component.ts","/Users/ericramirez/Desktop/Dev_Learning/FrontEnd/Angular/control_clientes_frontend/src/app/Components/crear-cliente/crear-cliente.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-crear-cliente',\n  templateUrl: './crear-cliente.component.html',\n  styleUrls: ['./crear-cliente.component.css']\n})\nexport class CrearClienteComponent implements OnInit {\n\n  clienteForm: FormGroup;\n\n  constructor(private fb: FormBuilder) {\n    this.clienteForm = this.fb.group({\n      nombre: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      telefono: ['', Validators.required],\n      otrosDatos: ['', Validators.required],\n      direcciones: this.fb.array([]) // FormArray para múltiples direcciones\n    });\n  }\n\n  ngOnInit(): void {\n    // Iniciar con una dirección vacía\n    this.addDireccion();\n  }\n\n  // Getter para acceder al FormArray de direcciones\n  get direcciones(): FormArray {\n    return this.clienteForm.get('direcciones') as FormArray;\n  }\n\n  // Método para agregar una nueva dirección\n  addDireccion() {\n    const direccionForm = this.fb.group({\n      calle: ['', Validators.required],\n      sector: ['', Validators.required],\n      provincia: ['', Validators.required],\n      pais: ['', Validators.required]\n    });\n    this.direcciones.push(direccionForm);\n  }\n\n  // Método para eliminar una dirección\n  removeDireccion(index: number) {\n    this.direcciones.removeAt(index);\n  }\n\n  // Método para guardar el cliente con direcciones\n  saveCliente() {\n    if (this.clienteForm.valid) {\n      console.log(this.clienteForm.value);\n      // Lógica para guardar el cliente y sus direcciones\n    }\n  }\n}\n","<form>\n  <div class=\"mb-3\">\n    <label for=\"InputNombre\" class=\"form-label\">Nombre</label>\n    <input type=\"text\" class=\"form-control\" id=\"InputNombre\">\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"InputEmail\" class=\"form-label\">Email</label>\n    <input type=\"email\" class=\"form-control\" id=\"InputEmail\">\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"InputTel\" class=\"form-label\">Telefono</label>\n    <input type=\"tel\" class=\"form-control\" id=\"InputTel\">\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"InputOtros\" class=\"form-label\">Otros Datos</label>\n    <input type=\"text\" class=\"form-control\" id=\"InputOtros\">\n  </div>\n\n  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}